---
import EtherProvider from "@components/EtherProvider.astro";
import Layout from "@layouts/Layout.astro"
---

<Layout title="Purchase | Degenerous">
    <main id="claim">
        <claim-page>
            <EtherProvider>
                <Fragment slot="missing">
                    <div class="warning">
                        <h1>Metamask not installed</h1>
                        <p>
                            You're missing metamask, please install it from
                            <a href="https://metamask.io/download/">their website</a>
                        </p>
                    </div>
                </Fragment>
                <Fragment slot="locked">
                    <div class="warning">
                        <h1>Metamask not connected</h1>
                        <p>Please connect your wallet</p>
                        <button class="unlock">Connect</button>
                    </div>
                </Fragment>
                <Fragment slot="wrong-network"> 
                    <div class="warning">
                        <h1>Wrong network</h1>
                        <p>Please change your network to Exosama Network</p>
                        <button class="network">Change network</button>
                    </div>
                </Fragment>
                <h1>Purchase Your Inception <span class="total-text">Ark</span></h1>
                <div class="claim-card">
                    <div class="claim-info">
                        <div class="claim-data">
                            Total allocation:
                            <span class="total">0</span>
                            Purchased:
                            <span class="claimed">0</span>
                            Yet to be purchased:
                            <span class="available">0</span>
                            Price:
                            <span class="price">
                                <img src="/icons/usdc-logo.svg" class="usdc-logo" alt="">
                                USDC
                            </span>
                        </div>
                        <div class="mint-form">
                            <input required type="number" name="number" class="quantity" value="1" min="1" max="1">
                            <button class="claim claim-btn" data-state="disclaimer">APPROVE</button>
                        </div>
                    </div>
                    <span class="airdrop">
                        NFTs will be airdropped to your whitelisted address once the public sale period begins
                    </span>
                </div>
            </EtherProvider>
            <div class="disclaimer">
                <div>
                    By proceeding with this sale, you as the buyer accept the following terms:
                    <br>
                    <li>You have done your own research and you would like to purchase Inception Arks NFT(s)*</li>
                    <li>You are familiar with the risks involved with cryptocurrencies and NFTs</li>
                    <li>You do not expect any financial returns nor do you consider this transaction as an investment opportunity</li>
                    <li>The sale is subject to any applicable laws and regulations, including those related to securities and consumer protection </li>
                    <li>You have verified that the wallet address you are using for this transaction is owned by you and that you have full access to it</li>
                    <li>You have verified that you are eligible for the purchase and that the amount, timing, and process related to the purchase have been fully respected.</li>
                    <br>
                    *The DeGenerous Inception Arks NFTs are sold on an 'as is' and 'as available' basis, without any warranties or representations of any kind, whether express, implied, or statutory. The seller does not guarantee their quality, value, or authenticity.
                </div>
            </div>
        </claim-page>
    </main>
</Layout>

<script>
    import { change_listener, get_data, approve_claim, claim, get_state, state, add_network, with_signer, get_allowence } from "@lib/ether";

	class ClaimPage extends HTMLElement {
        #disclaimer: HTMLDivElement;
        #total:      HTMLSpanElement;
        #totalText:  HTMLSpanElement;
        #claimed:    HTMLSpanElement;
        #available:  HTMLSpanElement;
        #price:      HTMLSpanElement;
        #number:     HTMLInputElement;
        #button:     HTMLButtonElement;

        #allowence: number;
        #allowed: boolean;

        async #set_data() {
            const [claimed, available, price] = await get_data();
            const total = claimed + available;

            this.#allowence = await get_allowence();

            this.#total.innerText = `${total}`;
            this.#totalText.innerText = total > 1 ? 'Arks' : 'Ark';
            this.#claimed.innerText = `${claimed}`;
            this.#available.innerText = `${available}`;
            this.#price.dataset.price = `${price}`;
            this.#number.max = `${available}`;

            if (this.#button.dataset.state !== "claimed") {
                this.#number_changed();
            }

            if (available === 0) {
                this.#button.dataset.state = "done";
                this.#button.disabled = true;
                this.#button.innerText = "DONE";
            }
        }

        async #check_input(): Promise<boolean> {
            if(this.#number === null) { return false; }

            try {
                const requested = parseInt(this.#number.value);
                const min = parseInt(this.#number.min);
                const max = parseInt(this.#number.max);

                if (requested >= min && requested <= max) { return true; }
            } catch {
                return false;
            }

            return false;
        }

        async #button_handler() {
            if(this.#button === null) { return; }

            if (!this.#allowed) {
                this.#disclaimer.dataset.shown = "true";
                this.#allowed = true;
                return;
            }

            switch (this.#button.dataset.state) {
                case "waiting": case "claimed": {
                    if(this.#number === null) { return; }

                    if (!await this.#check_input()) {
                        alert(`You can't purchase ${this.#number.value} tokens`)
                        return;
                    }

                    this.#button.dataset.state = "pending";
                    this.#button.disabled = true;

                    const requested = parseInt(this.#number.value);

                    try {
                        await approve_claim(requested);
                        this.#allowence = await get_allowence();
                    } catch (e) {
                        console.error(e);
                        window.alert("Error approving transaction, please try again.");
                        this.#number_changed();
                        this.#button.disabled = false;

                        return;
                    }

                    this.#number_changed();
                    this.#button.disabled = false;

                    break;
                }

                case "approved": {
                    if(this.#number === null) { return; }

                    if (!await this.#check_input()) {
                        alert(`You can't purchase ${this.#number.value} tokens`);
                        return;
                    }

                    this.#button.dataset.state = "pending";
                    this.#button.disabled = true;

                    const requested = parseInt(this.#number.value);

                    if (await get_allowence() < requested) {
                        alert("Not enough money approved, please try again!");
                        this.#number_changed();
                        this.#button.disabled = false;

                        return;
                    }

                    try {
                        await claim(requested);
                        this.#allowence = await get_allowence();
                    } catch (e) {
                        console.error(e);
                        window.alert("Error approving transaction, please try again.");
                        this.#number_changed();
                        this.#button.disabled = false;

                        return;
                    }

                    this.#button.dataset.state = "claimed";
                    this.#button.innerText = "PURCHASED";
                    this.#button.disabled = false;

                    await this.#set_data();
                    break;
                }

                case "pending": {
                    console.error("Please wait for the transaction to finish!");
                    break;
                }

                default: { return; }
            }
        }

        #number_changed() {
            const selected = parseInt(this.#number.value);
            if (selected <= this.#allowence) {
                this.#button.dataset.state = "approved";
                this.#button.innerText = "PURCHASE";
            } else {
                this.#button.dataset.state = "waiting";
                this.#button.innerText = "APPROVE";
            }
        }

		constructor() {
			super();

            this.#disclaimer = document.querySelector(".disclaimer") as HTMLDivElement;
            this.#total      = document.querySelector(".total")      as HTMLSpanElement;
            this.#totalText  = document.querySelector(".total-text") as HTMLSpanElement;
            this.#claimed    = document.querySelector(".claimed")    as HTMLSpanElement;
            this.#available  = document.querySelector(".available")  as HTMLSpanElement;
            this.#price      = document.querySelector(".price")      as HTMLSpanElement;
            this.#number     = document.querySelector(".quantity")   as HTMLInputElement;
            this.#button     = document.querySelector(".claim")      as HTMLButtonElement;

            (document.querySelector(".network") as HTMLButtonElement).addEventListener("click", add_network);
            (document.querySelector(".unlock")  as HTMLButtonElement).addEventListener("click", with_signer);

            this.#number.addEventListener("change", () => this.#number_changed());
            this.#disclaimer.addEventListener("click", () => { delete this.#disclaimer.dataset.shown; })

            this.#allowed = false;

            change_listener(async () => { 
                if(this.#button === null) { return; }
                const handler = () => this.#button_handler();

                if (await get_state() === state.READY) {
                    this.#set_data(); 
                    this.#button.addEventListener("click", handler);
                } else {
                    this.#button.removeEventListener("click", handler);
                }
            });
		}
	}

	customElements.define('claim-page', ClaimPage);
</script>

<style lang="scss">
    #claim {
        position: relative;
        min-height: 100vh;
        background: url("/images/Web-BG-2a-1.jpg") no-repeat center center;
        background-size: cover;
        background-attachment: fixed;

        h1 {
            padding-top: 50px;
            font-size: 4rem;
            text-align: center;
            filter: drop-shadow(.5rem .5rem 1rem hsla(var(--bg-color), .5));
        }

        .claim-card {
            display: grid;
            place-content: center;
        }

        .claim-info {
            display: flex;
            gap: 4rem;
            margin-top: 5rem;
            padding: 3rem;
            font-size: 1.2rem;
            background: var(--bg-color-transparent);
            clip-path: polygon(
                0 0, 
                calc(100% - var(--border-size)) 0,
                100% var(--border-size),
                100% 100%,
                var(--border-size) 100%,
                0 calc(100% - var(--border-size))
            );
        }

        .claim-data {
            display: grid;
            grid-template-columns: repeat(2, auto);
            column-gap: 1.5rem;
        }

        .mint-form {
            display: flex;
            flex-direction: column;
            justify-content: space-evenly;
        }

        .price {
            display: flex;
            align-items: center;

            &::before {
                content: attr(data-price);
                margin-right: .5ch;
            }

            .usdc-logo {
                height: 2rem;
            }   
        }

        .quantity {
            width: 7.5rem;
            padding: .5rem;
            padding-left: 1rem;
            font-size: 1.5rem;
            text-align: center;
            border: 0;

            --border-size: .5rem;
            clip-path: polygon(
                0 0, 
                calc(100% - var(--border-size)) 0,
                100% var(--border-size),
                100% 100%,
                var(--border-size) 100%,
                0 calc(100% - var(--border-size))
            );
        }

        .claim {
            padding: 7px 50px;
            font-family: 'Righteous', cursive;
            font-size: 2rem;
            color: var(--accent-color);
            background-color: #fff;
            transition: filter 0.2s;

            border: 0;
            --border-size: 1rem;
            clip-path: polygon(
                0 0, 
                calc(100% - var(--border-size)) 0,
                100% var(--border-size),
                100% 100%,
                var(--border-size) 100%,
                0 calc(100% - var(--border-size))
            );

            &:not(:disabled) {
                cursor: pointer;

                &:hover {
                    filter: brightness(.7);
                }

                &:active {
                    filter: brightness(.5);
                }
            }

            &:disabled {
                filter: brightness(.7);
            }
        }

        @media screen and (max-width: 50rem) {
			h1 {
                font-size: 3rem;
            }

			.claim-info {
                flex-direction: column;
                gap: 1rem;
                margin-top: 2rem;
                padding: 1rem;
            }

            .mint-form {
                gap: .5rem;
            }
		}	
    }

    .airdrop {
        text-align: center;
        background: var(--bg-color-transparent);
        margin-top: 1rem;
        padding: .5rem 1rem
    }

    .warning {
        background: hsl(var(--bg-color));
        text-align: center; 
        padding: 2rem;

        p {
            font-size: 1.2rem;
        }

        a {
            text-underline-offset: 6px;
            text-decoration: underline;
        }

        button {
            padding: 7px 50px;
            font-family: 'Righteous', cursive;
            font-size: 2rem;
            color: var(--accent-color);
            background-color: #fff;
            margin-top: 1rem;
            cursor: pointer;
            transition: filter 0.2s;

            border: 0;
            --border-size: 1rem;
            clip-path: polygon(
                0 0, 
                calc(100% - var(--border-size)) 0,
                100% var(--border-size),
                100% 100%,
                var(--border-size) 100%,
                0 calc(100% - var(--border-size))
            );

            &:hover {
                filter: brightness(.7);
            }

            &:active {
                filter: brightness(.5);
            }
        }

        @media screen and (max-width: 50rem) {
            h1 {
                padding-top: 0 !important;
                font-size: 2.5rem !important;
            }

            p {
                font-size: 1rem;
            }

			button {
                font-size: 1.5rem;
            }
		}
    }

    .disclaimer {
        position: fixed;
        inset: 0;
        z-index: 1000;
        display: grid;
        place-content: center;
        background-color: hsla(0 0% 0% / 50%);

        div {
            background: hsl(var(--bg-color));
            padding: 3rem;
            max-width: 50rem;
            clip-path: polygon(
                0 0, 
                calc(100% - var(--border-size)) 0,
                100% var(--border-size),
                100% 100%,
                var(--border-size) 100%,
                0 calc(100% - var(--border-size))
            );
        }
    }

    .disclaimer:not([data-shown]) {
        display: none;
    }
</style>
