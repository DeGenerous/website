---
import LoginProvider from '@components/LoginProvider.astro';
import Section from '@components/Section.astro';
import Layout from '@layouts/Layout.astro';
---

<Layout title="CoNexus | Degenerous" page="CoNexus">
	<main>
        <LoginProvider>
            <Section title="CoNexus" gap slot="yes">
                <connexus-component data-state="start">
                    <div class="start">
                        <h2>A new world of unique possibilities awaits you</h2>
                        <span class="about">
                            <p>Welcome to CoNexus, an immersive and dynamic interactive story game that serves as your personal gateway to a boundless multiverse. Powered by cutting-edge artificial intelligence, CoNexus seamlessly generates captivating narratives and vivid visuals in real-time, offering you an unparalleled journey into infinite and truly one-of-a-kind experiences.</p>
                            <p>During each loading animation, it's the AI that is coming up in real-time with the story text, choices presented, and the picture generated. Due to this live factor, nobody can rig it, or know how the story will develop, and there's endless possibilities.</p>
                            <p>Within CoNexus, you will transcend the boundaries of reality as we know it, delving into alternate dimensions where you possess the remarkable ability to shape and influence the outcome of pivotal moments from the past, present, and future.</p>
                            <p>Your primary objective in this extraordinary realm is to survive the challenges that await you, navigating through a rich tapestry of possibilities. Additionally, strive to acquire as many traits as you can, as it can help evolve your avatar in a multiverse-spanning story.</p>
                            <p>Your choices and actions will shape the course of your own unique narrative. Get ready to explore, conquer, and immerse yourself in a world without limits.</p>
                            <strong class="available">Daily stories played:</strong>
                        </span>
                        <h2>Choose your adventure</h2>
                        <div class="buttons start-buttons">
                            <button data-story="escape" class="c bstart" disabled>the Escape</button>
                            <button data-story="arena" class="c bstart" disabled>the Arena</button>
                            <button data-story="diesel" class="c bstart" disabled>Diesel</button>
                            <button data-story="public_pressure" class="c bstart" disabled>Public Pressure</button>
                            <button data-story="givenchy" class="c bstart" disabled>Givenchy</button>
                            <button data-story="louis_vuitton" class="c bstart" disabled>Louis Vuitton</button>
                            <button data-story="ayy" class="c bstart" disabled>Ayy</button>
                            <button data-story="apes" class="c bstart" disabled>GLMR Apes</button>
                        </div>
                    </div>
                    <div class="step">
                        <div class="image-wrapper">
                            <img class="image" alt="" src="">
                        </div>
                        <div class="controls">
                            <div class="_volume">
                                <button class="c bg-mute">
                                    <img src="/icons/volume.svg" alt="Change backround music volume">
                                </button>
                                <input class="bg-volume" type="range" min="0" max="1" step="0.01" value="0.1">
                            </div>
                            <div class="_volume">
                                <button class="c tts-mute">
                                    <img class=""src="/icons/text_to_speech.svg" alt="Change text to speech volume">
                                </button>
                                <input class="tts-volume" type="range" min="0" max="1" step="0.01" value="0.1">
                            </div>
                            <div class="spacer"></div>
                            <button class="c fullscreen">
                                <img src="/icons/fullscreen.svg" class="fullscreen_enter" alt="Enter fullscreen">
                                <img src="/icons/fullscreen_exit.svg" class="fullscreen_exit" alt="Exit fullscreen">
                            </button>
                        </div>
                        <span class="story"></span>
                        <div class="heading">
                            <h2>Options</h2>
                            <div class="line"></div>
                            <strong class="step_number"></strong>
                        </div>
                        <div class="options buttons" />
                    </div>
                    <div class="end">
                        <div class="image-wrapper">
                            <img class="image" alt="" src="">
                        </div>
                        <span class="end_story"></span>
                        <h2>The story has ended. Here is the summary of your adventure:</h2>
                        <span class="summary"></span>
                        <h2 class="trait-heading">AI has identified you as: <span class="trait"></span></h2>
                        <div class="buttons">
                            <button class="c bhome">Back to homepage</button>
                        </div>
                    </div>
                    <div class="error">
                        <div class="image-wrapper">
                            <img class="image" alt="">
                        </div>
                        <span class="error_message"></span>
                        <div class="buttons">
                            <button class="c bhome">Back to homepage</button>
                        </div>
                    </div>
                    <div class="spinner" onclick="(e) => e.stopPropagation()" />
                </connexus-component>
            </Section>
            <Section title="CoNexus" gap slot="no">
                <span class="about">
                    <p>Welcome to CoNexus, an immersive and dynamic interactive story game that serves as your personal gateway to a boundless multiverse. Powered by cutting-edge artificial intelligence, CoNexus seamlessly generates captivating narratives and vivid visuals in real-time, offering you an unparalleled journey into infinite and truly one-of-a-kind experiences.</p>
                    <p>During each loading animation, it's the AI that is coming up in real-time with the story text, choices presented, and the picture generated. Due to this live factor, nobody can rig it, or know how the story will develop, and there's endless possibilities.</p>
                    <p>Within CoNexus, you will transcend the boundaries of reality as we know it, delving into alternate dimensions where you possess the remarkable ability to shape and influence the outcome of pivotal moments from the past, present, and future.</p>
                    <p>Your primary objective in this extraordinary realm is to survive the challenges that await you, navigating through a rich tapestry of possibilities. Additionally, strive to acquire as many traits as you can, as it can help evolve your avatar in a multiverse-spanning story.</p>
                    <p>Your choices and actions will shape the course of your own unique narrative. Get ready to explore, conquer, and immerse yourself in a world without limits.</p>
                </span>

                <h2 class="connect">To access CoNexus please connect your wallet</h2>
            </Section>
        </LoginProvider>
    </main>
</Layout>

<script>
    import { ready } from "@lib/auth";

    type Node = {
        id:      string,
        step:    number,
        story:   string,
        end:     boolean,
        summary: string,
        trait:   string,
        options: string[],
        image?:  string,
    }

    type Available = {
        available:   number,
		used:        number,
        bonus:       number,
        classes:     string[],
        all_classes: string[],
    }

    type CoNexusError = {
        code: number,
		text: string,
    }

    const url = import.meta.env.PUBLIC_BACKEND;
    const tracks = ["track01.mp3", "track02.mp3", "track03.mp3"];

    const shuffle = <T,>(array: T[]) => {
        let currentIndex = array.length,  randomIndex: number;

        while (currentIndex != 0) {
            randomIndex = Math.floor(Math.random() * currentIndex);
            currentIndex--;

            [array[currentIndex], array[randomIndex]] = 
            [array[randomIndex], array[currentIndex]];
        }

        return array;
    }

	class Connexus extends HTMLElement {
        #bstart:          NodeListOf<HTMLButtonElement>;
        #start_buttons:   HTMLDivElement;
        #images:          NodeListOf<HTMLImageElement>;
        #bg_mute:         HTMLButtonElement;
        #bg_volume:       HTMLInputElement;
        #tts_mute:         HTMLButtonElement;
        #tts_volume:      HTMLInputElement;
        #fullscreen:      HTMLButtonElement;
        #story:           HTMLSpanElement;
        #options:         HTMLDivElement;
        // #continue_button: HTMLButtonElement;
        #home_buttons:    NodeListOf<HTMLButtonElement>;
        #step_number:     HTMLElement;
        #end_story:       HTMLSpanElement;
        #summary:         HTMLSpanElement;
        #trait:           HTMLSpanElement;
        #available:       HTMLSpanElement;
        #error:           HTMLSpanElement;

        #track:    number;
        #bg_audio: HTMLAudioElement;
        #tts_audio:HTMLAudioElement;

        #set_bg_volume(volume?: number) {
            const v = typeof volume != "undefined" ? volume : parseFloat(this.#bg_volume.value);
            this.#bg_volume.value = `${v}`;
            this.#bg_audio.volume = v;
            localStorage.setItem("bg_volume", `${v}`);
        }

        #set_tts_volume(volume?: number) {
            const v = typeof volume != "undefined" ? volume : parseFloat(this.#tts_volume.value);
            this.#tts_volume.value = `${v}`;
            this.#tts_audio.volume = v;
            localStorage.setItem("tts_volume", `${v}`);
        }

        #play_music() {
            let queue: number[] = JSON.parse(localStorage.getItem("queue") ?? "[]");

            if (queue.length === 0) {
                queue = shuffle([...tracks.keys()]);
            }

            this.#track = queue.shift() ?? 0;
            localStorage.setItem("queue", JSON.stringify(queue));

            this.#bg_audio = new Audio("/music/coNexus/" + tracks[this.#track]);
            this.#set_bg_volume();
            this.#bg_audio.play();

            this.#bg_audio.onended = () => this.#play_music();
        }

        async #init() {
            this.#bg_volume.value = localStorage.getItem("bg_volume") ?? "0.1";
            this.#tts_volume.value = localStorage.getItem("tts_volume") ?? "0.3";
            const response = await fetch(`${url}/available`, {
                method: "POST",
            });

            if (!response.ok) {
                this.#set_error({code: response.status, text: await response.text()});
                return;
            }

            const {used, available, bonus, classes, all_classes}: Available = await response.json();

            let played = `Daily stories played: ${used} / ${available}`;

            if (bonus > 0) {
                played += `\nRemaining bonus games: ${bonus}`
            }

            this.#available.innerText = played;

            if (used < available + bonus) {
                [...this.#start_buttons.children].forEach( (b: HTMLButtonElement) => b.disabled = false);
            }

            all_classes?.forEach(e => {
                const button = document.createElement("button");
                button.classList.add("c");
                button.innerText = `the ${e.charAt(0).toUpperCase() + e.slice(1)}`;
                button.onclick = () => this.#start(e);
                button.disabled = !(classes ?? []).includes(e);
                this.#start_buttons.appendChild(button);
            })
        }

        #set_error(error: CoNexusError) {
            const errors = [
                "Warning: The CoNexus Multiversal Interface Node has encountered a Paradox Rift issue and destabilized your systems.The parallel universe you were exploring has imploded and ceased to exist. Congratulations, you have successfully destroyed an entire universe.",
                "Warning: The Architect’s minions have traced your CoNexus signal and have hijacked your control processor. Agents are being dispatched to your current location."
            ];

            this.dataset.state = "error";
            this.#error.innerText = errors[Math.floor(Math.random() * errors.length)] + `\n\nError ${error.code}:\n${error.text}`;
            this.#images.forEach(i => i.src = `/images/error.png`);
            delete this.dataset.loading;
        }


        #home() {
            location.reload();
        }

        async #start(category: string) {
            this.#play_music();

            this.dataset.loading = "";
            const response = await fetch(`${url}/start`, {
                body: JSON.stringify({
                    category: category
                }),
                method: "POST",
            });

            if (!response.ok) {
                this.#set_error({code: response.status, text: await response.text()});
                localStorage.removeItem("node");
                return;
            }
            delete this.dataset.loading;

            await this.#set_data(await response.json());
        }

        async #respond(id: string, index: number) {
            this.dataset.loading = "";
            const response = await fetch(`${url}/respond`, {
                method: "POST",
                body: JSON.stringify({
                    story_id: id,
                    choice: index
                })
            });
            delete this.dataset.loading;

            if (!response.ok) {
                this.#set_error({code: response.status, text: await response.text()});
                localStorage.removeItem("node");
                return;
            }

            await this.#set_data(await response.json());
        }

        async #set_data(node: Node) {
            this.#step_number.innerText = `Step ${(node.step < 10)? "0": ""}${node.step}`;

            this.#options.replaceChildren();
            if (node.end) {
                this.dataset.state = "end";
                this.#end_story.innerText = node.story;
                this.#summary.innerText = node.summary;
                this.#trait.innerText = node.trait;
            } else {
                this.dataset.state = "step";
                this.#story.innerText = node.story;
                for (const [i, option] of node.options.entries()) {
                    const button = document.createElement("button");

                    button.classList.add("c");
                    button.innerText = option;
                    button.onclick = () => this.#respond(node.id, i + 1);

                    this.#options.appendChild(button);
                }
            }

            await this.#tts(node.id);

            if (node.image) {
                this.#images.forEach(i => i.src = `data:image/png;base64,${node.image}`);
            } else {
                this.dataset.image = "loading";
                this.#images.forEach( i => i.src = "https://i.pinimg.com/originals/19/09/f9/1909f9e57aca7d81ab5cbb50b9a7a069.gif");

                const response = await fetch(`${url}/image`, {
                    method: "POST",
                    body: JSON.stringify({ story_id: node.id })
                });

                if (!response.ok) {
                    this.#set_error({code: response.status, text: await response.text()});
                    return;
                }

                delete this.dataset.image;

                const image = await response.text();
                this.#images.forEach(i => i.src = `data:image/png;base64,${image}`);
                node.image = image;
            }

            if (node.end) {
                localStorage.removeItem("node");
            } else {
                localStorage.setItem("node", JSON.stringify(node));
            }
        }

        async #tts(story_id: string) {
            const response = await fetch(`${url}/tts`, {
                method: "POST",
                body: JSON.stringify({ story_id })
            });


            if (!response.ok) {
                this.#set_error({code: response.status, text: await response.text()});
                return;
            }

            if (this.#tts_audio != null) {
                this.#tts_audio.pause();
                this.#tts_audio.remove();
            }

            this.#tts_audio = new Audio();
            this.#tts_audio.src = window.URL.createObjectURL(await response.blob());
            this.#set_tts_volume();
            await this.#tts_audio.play();
        }

        #toggle_fullscreen() {
            if (document.fullscreenElement) {
                document.exitFullscreen();
            } else {
                document.querySelector("main")?.requestFullscreen();
            }
        }

        #can_continue(): boolean {
            return localStorage.getItem("node") !== null;
        }

        async #continue() {
            const node: Node = JSON.parse(localStorage.getItem("node") ?? "{}");

            this.#play_music();

            return this.#set_data(node);
        }

		constructor() {
			super();

            this.#bstart          = document.querySelectorAll(".bstart")     as NodeListOf<HTMLButtonElement>;
            this.#start_buttons   = document.querySelector(".start-buttons") as HTMLDivElement;
            this.#images          = document.querySelectorAll(".image")      as NodeListOf<HTMLImageElement>;
            this.#bg_mute         = document.querySelector(".bg-mute")       as HTMLButtonElement;
            this.#bg_volume       = document.querySelector(".bg-volume")     as HTMLInputElement;
            this.#tts_mute        = document.querySelector(".tts-mute")      as HTMLButtonElement;
            this.#tts_volume      = document.querySelector(".tts-volume")    as HTMLInputElement;
            this.#fullscreen      = document.querySelector(".fullscreen")    as HTMLButtonElement;
            this.#story           = document.querySelector(".story")         as HTMLSpanElement;
            this.#options         = document.querySelector(".options")       as HTMLDivElement;
            // this.#continue_button = document.querySelector(".continue")    as HTMLButtonElement;
            this.#home_buttons    = document.querySelectorAll(".bhome")      as NodeListOf<HTMLButtonElement>;
            this.#step_number     = document.querySelector(".step_number")   as HTMLElement;
            this.#end_story       = document.querySelector(".end_story")     as HTMLSpanElement;
            this.#summary         = document.querySelector(".summary")       as HTMLSpanElement;
            this.#trait           = document.querySelector(".trait")         as HTMLSpanElement;
            this.#available       = document.querySelector(".available")     as HTMLSpanElement;
            this.#error           = document.querySelector(".error_message") as HTMLSpanElement;

            this.#bstart.forEach(e => {
                e.onclick = () => this.#start(e.dataset.story ?? "");
            })

            this.#home_buttons.forEach(e => {
               e.onclick = () => this.#home(); 
            });

            // if (this.#can_continue()) {
            //     this.#continue_button.onclick = () => this.#continue();
            //     this.#continue_button.classList.remove("hidden");
            // }

            this.#bg_mute.onclick = () => this.#set_bg_volume(0);
            this.#bg_volume.onchange = () => this.#set_bg_volume();
            this.#tts_mute.onclick = () => this.#set_tts_volume(0);
            this.#tts_volume.onchange = () => this.#set_tts_volume();
            this.#fullscreen.onclick = () => this.#toggle_fullscreen();

            ready(() => {
                this.#init();  
            })
		}
	}

	customElements.define("connexus-component", Connexus);
</script>

<style lang="scss">
    body {
        background-color: hsl(254, 33%, 5%);
    }

    main {
        position: relative;
        background-image: url("/images/conexus-bg.jpg");
        background-size: cover;
        background-position: bottom center;
        background-blend-mode: darken;
        background-color: rgba(0,0,0,0.7);
        padding-bottom: 5rem;
        overflow-y: auto;
    }

    .connect {
        font-size: 2rem;
    }

    connexus-component {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
    }

    $options: "start", "step", "end", "error";

    @each $option in $options {
        [data-state=#{$option}] > :not(.#{$option}) {
            display: none;
        }
    }

    $star-size: 10px;
    .stars :global(.star) {
        background-color: white;
        width: $star-size;
        aspect-ratio: 1/1;
        position: absolute;
        top: var(--y);
        left: var(--x);
        border-radius: 50%;
        filter: blur(2px);
    }

    .start h2 {
        margin-bottom: 1rem;
    }

    .about {
        margin-bottom: 2rem;
        display: block;
    }

    .step, .end, .error {
        display: flex;
        flex-direction: column;
        width: 100%;
    }

    .image:not([src]) {
        display: none;
    }

    .image[src=""] {
        opacity: 0;
    }

    $shadow-size: 0.5rem;
    $image-size: 512px;
    .image, .image-wrapper {
        align-self: center;
        width: $image-size;
        max-width: calc(90vw - $shadow-size);
        aspect-ratio: 1/1;
        object-fit: cover;
        box-shadow: $shadow-size $shadow-size 0 var(--accent-color);
    }

    .image-wrapper {
        width: calc($image-size + $shadow-size);
        max-width: 90vw;

        clip-path: polygon(
			0 0, 
			calc(100% - var(--border-size)) 0, 
			100% var(--border-size), 
			100% 100%, 
			var(--border-size) 100%, 
			0 calc(100% - var(--border-size))
		);

        [data-image="loading"] & {
            mix-blend-mode: lighten;
        }
    }

    .controls {
        display: flex;
        align-items: center;
        margin-top: 2rem;
        gap: 3rem;

        .spacer {
            flex-grow: 1;
        }

        img {
            height: 2rem;
            aspect-ratio: 1/1;
        }

        button {
            cursor: pointer;

            &:hover {
                filter: brightness(0.7);
            }
        }

        .fullscreen_enter { display: initial; }
        .fullscreen_exit  { display: none;    }

        @media all and (display-mode: fullscreen) {
            .fullscreen_enter { display: none;    }
            .fullscreen_exit  { display: initial; }
        }

    }

    ._volume {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 1rem;
    }

    .story {
        margin-block: 2rem;
    }

    .heading {
        display: flex;
        gap: 1rem;
        align-items: center;
        padding: 2rem;

        .line {
            height: .2rem;
            background-color: var(--fg-color);
            flex-grow: 1;
        }

        .step_number {
            padding: 0.75rem 1.5rem;
            border: .2rem solid var(--fg-color);
            border-radius: 1rem;
        }
    }

    .buttons {
        display: flex;
        flex-direction: column;
        width: 100%;
        align-items: stretch;
        gap: .75rem;


        .hidden {
            display: none;
        }

        :global(button) {
            text-align: start;
            font-weight: bold;
            font-size: 1.2rem;
            padding: 0.25rem;
            display: flex;
            align-items: center;
            cursor: pointer;

            &::before {
                content: "";
                height: 1.5rem;
                width: 0.25rem;
                background-color: var(--fg-color);
                display: inline-block;
                margin-right: 1rem;
            }

            &:disabled {
                filter: brightness(0.7);
            }

            &:not(:disabled) {
                :not([data-loading]) &:hover {
                    background: linear-gradient(to right, transparent 1rem, var(--accent-color) 1rem, transparent);
                    &::before {
                        background-color: var(--accent-color);
                    }
                }

                &:active {
                    filter: brightness(0.7);
                    background: linear-gradient(to right, transparent 1rem, var(--accent-color) 1rem, transparent);
                    &::before {
                        background-color: var(--accent-color);
                    }
                }

                &:focus {
                    filter: brightness(0.65);
                    background: linear-gradient(to right, transparent 1rem, var(--accent-color) 1rem, transparent);
                    &::before {
                        background-color: var(--accent-color);
                    }
                }
            }
        }
    }

    .trait-heading {
        margin-bottom: 2rem;
    }

    .end_story, .summary, .error_message {
        margin-block: 2rem;
        display: block;
    }

	@keyframes glare {
		from {
			background-position: top right;
		}
		to {
			background-position: bottom left;
		}
	}

    .spinner.spinner {
        pointer-events: none;
        display: block;
        opacity: 0;
        transition: opacity 0.2s;

        z-index: 100;
        position: fixed;
        inset: 0;
        background-image: linear-gradient(45deg, transparent 40%, hsl(0, 0%, 100%, .1) 60%, transparent 65%);
        background-size: 300% 300%;
        background-position: top right;
        background-color: rgba(0,0,0,0.7);
    }

    [data-loading] {
        pointer-events: none;
    }

    [data-loading] .spinner {
        opacity: 1;
        animation: glare 2s ease-in-out infinite;
    }
</style>
