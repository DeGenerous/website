---
import EtherProvider from "../components/EtherProvider.astro";
import Layout from "../layouts/Layout.astro"
---

<Layout title="Claim | Degenerous">
    <main id="claim">
        <claim-page>
            <EtherProvider>
                <Fragment slot="missing">
                    <div class="warning">
                        <h1>Metamask not installed</h1>
                        <p>
                            You're missing metamask, please install it from
                            <a href="https://metamask.io/download/">their website</a>
                        </p>
                    </div>
                </Fragment>
                <Fragment slot="locked">
                    <div class="warning">
                        <h1>Account locked</h1>
                        <p>Please unlock your wallet</p>
                        <button class="unlock">Unlock</button>
                    </div>
                </Fragment>
                <Fragment slot="wrong-network">
                    <div class="warning">
                        <h1>Wrong network</h1>
                        <p>Please change your network to Exosama Network</p>
                        <button class="network">Add network</button>
                    </div>
                </Fragment>
                <h1>Claim Your Inception <span class="total-text">Ark</span></h1>
                <div class="claim-card">
                    <div class="claim-info">
                        <div class="claim-data">
                            Total allocation:
                            <span class="total">0</span>
                            Claimed:
                            <span class="claimed">0</span>
                            Yet to be minted:
                            <span class="available">0</span>
                            Mint price:
                            <span class="price">
                                <img src="/icons/usdc-logo.svg" class="usdc-logo" alt="">
                                USDC
                            </span>
                        </div>
                        <div class="mint-form">
                            <input required type="number" name="number" class="quantity" value="1">
                            <button class="claim claim-btn" data-state="waiting">CLAIM</button>
                        </div>
                    </div>
                </div>
            </EtherProvider>
        </claim-page>
    </main>
</Layout>

<script>
    import { change_listener, get_data, approve_claim, claim, get_state, state, add_network, with_signer } from "../lib/ether";

	class ClaimPage extends HTMLElement {
        #total:     Nullable<HTMLSpanElement>;
        #totalText: Nullable<HTMLSpanElement>;
        #claimed:   Nullable<HTMLSpanElement>;
        #available: Nullable<HTMLSpanElement>;
        #price:     Nullable<HTMLSpanElement>;
        #number:    Nullable<HTMLInputElement>;
        #button:    Nullable<HTMLButtonElement>;

        async #set_data() {
            const [claimed, available, price] = await get_data();

            if(this.#claimed === null || this.#available === null || this.#price === null || this.#total === null || this.#totalText === null) { 
                return; 
            }

            var total = claimed + available;

            this.#total.innerText = `${total}`;
            this.#totalText.innerText = total > 1 ? 'Arks' : 'Ark';
            this.#claimed.innerText = `${claimed}`;
            this.#available.innerText = `${available}`;
            this.#price.dataset.price = `${price}`;
        }

        async #button_handler() {
            if(this.#button === null) { return; }

            switch (this.#button.dataset.state) {
                case "waiting": case "claimed": {
                    this.#button.dataset.state = "pending";
                    await approve_claim();

                    this.#button.dataset.state = "approved";
                    this.#button.innerText = "mint";

                    break;
                }

                case "approved": {
                    if(this.#number === null) { return; }

                    this.#button.dataset.state = "pending";
                    await claim(parseInt(this.#number.value));
                    await this.#set_data();

                    this.#button.dataset.state = "claimed";
                    this.#button.innerText = "claimed";

                    break;
                }

                case "pending": {
                    console.error("Please wait for the transaction to finish!");
                    break;
                }

                default: {
                    return;
                }
            }
        }

		constructor() {
			super();

            this.#total =  document.querySelector(".total") as HTMLSpanElement;
            this.#totalText =  document.querySelector(".total-text") as HTMLSpanElement;
            this.#claimed =  document.querySelector(".claimed") as HTMLSpanElement;
            this.#available =  document.querySelector(".available") as HTMLSpanElement;
            this.#price =  document.querySelector(".price") as HTMLSpanElement;
            this.#number =  document.querySelector(".quantity") as HTMLInputElement;
            this.#button =  document.querySelector(".claim") as HTMLButtonElement;
            
            (document.querySelector(".network") as HTMLButtonElement).addEventListener("click", add_network);
            (document.querySelector(".unlock") as HTMLButtonElement).addEventListener("click", with_signer);

            change_listener(async () => { 
                if(this.#button === null) { return; }
                const handler = () => this.#button_handler();

                if (await get_state() === state.READY) {
                    this.#set_data(); 

                    this.#button.addEventListener("click", handler);
                } else {
                    this.#button.removeEventListener("click", handler);
                }
            });
		}
	}

	customElements.define('claim-page', ClaimPage);
</script>
<style lang="scss">
    #claim {
        position: relative;
        min-height: 100vh;
        background: url("/images/Web-BG-2a-1.jpg") no-repeat center center;
        background-size: cover;
        background-attachment: fixed;

        h1 {
            padding-top: 50px;
            font-size: 4rem;
            text-align: center;
            filter: drop-shadow(.5rem .5rem 1rem hsla(var(--bg-color), .5));
        }

        .claim-card {
            display: grid;
            place-content: center;
        }

        .claim-info {
            display: flex;
            gap: 4rem;
            margin-top: 5rem;
            padding: 3rem;
            font-size: 1.2rem;
            background: var(--bg-color-transparent);
            clip-path: polygon(
                0 0, 
                calc(100% - var(--border-size)) 0,
                100% var(--border-size),
                100% 100%,
                var(--border-size) 100%,
                0 calc(100% - var(--border-size))
            );
        }

        .claim-data {
            display: grid;
            grid-template-columns: repeat(2, auto);
            column-gap: 1.5rem;
        }

        .mint-form {
            display: flex;
            flex-direction: column;
            justify-content: space-evenly;
        }

        .price {
            display: flex;
            align-items: center;

            &::before {
                content: attr(data-price);
                margin-right: .5ch;
            }

            .usdc-logo {
                height: 2rem;
            }   
        }

        .quantity {
            width: 7.5rem;
            padding: .5rem;
            padding-left: 1rem;
            font-size: 1.5rem;
            text-align: center;
            border: 0;

            --border-size: .5rem;
            clip-path: polygon(
                0 0, 
                calc(100% - var(--border-size)) 0,
                100% var(--border-size),
                100% 100%,
                var(--border-size) 100%,
                0 calc(100% - var(--border-size))
            );
        }

        .claim {
            padding: 7px 50px;
            font-family: 'Righteous', cursive;
            font-size: 2rem;
            color: var(--accent-color);
            background-color: #fff;
            cursor: pointer;
            transition: filter 0.2s;

            --border-size: 1rem;
            clip-path: polygon(
                0 0, 
                calc(100% - var(--border-size)) 0,
                100% var(--border-size),
                100% 100%,
                var(--border-size) 100%,
                0 calc(100% - var(--border-size))
            );

            &:hover {
                filter: brightness(.7);
            }

            &:active {
                filter: brightness(.5);
            }
        }

        @media screen and (max-width: 50rem) {
			.claim-info {
                flex-direction: column;
                gap: 1rem;
            }

            .mint-form {
                gap: .5rem;
            }
		}	
    }

    .warning {
        background: hsl(var(--bg-color));
        text-align: center; 
        padding: 2rem;

        a {
            text-underline-offset: 6px;
            text-decoration: underline;
        }

        button {
            padding: 7px 50px;
            font-family: 'Righteous', cursive;
            font-size: 2rem;
            color: var(--accent-color);
            background-color: #fff;
            margin-top: 1rem;
            cursor: pointer;
            transition: filter 0.2s;

            --border-size: 1rem;
            clip-path: polygon(
                0 0, 
                calc(100% - var(--border-size)) 0,
                100% var(--border-size),
                100% 100%,
                var(--border-size) 100%,
                0 calc(100% - var(--border-size))
            );

            &:hover {
                filter: brightness(.7);
            }

            &:active {
                filter: brightness(.5);
            }
        }
    }
</style>
