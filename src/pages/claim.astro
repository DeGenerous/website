---
import EtherProvider from "../components/EtherProvider.astro";
import Layout from "../layouts/Layout.astro"
---

<Layout title="Claim | Degenerous">
    <main id="claim">
        <EtherProvider>
            <Fragment slot="missing">
                You're missing metamask, please install it from <a href="https://metamask.io/download/">their website</a>
            </Fragment>
            <claim-page data-locked>
                <h1>Claim Your Inception <span class="total-text">Ark</span></h1>
                <div class="locked">
                    Please unlock your wallet
                </div>
                <div class="unlocked claim-card">
                    <div class="claim-info">
                        <div class="claim-data">
                                Total allocation:
                                <span class="total">0</span>
                                Claimed:
                                <span class="claimed">0</span>
                                Yet to be minted:
                                <span class="available">0</span>
                                Mint price:
                                <span class="price">0 USDC</span>
                        </div>
                        <div class="mint-form">
                            <input required type="number" name="number" class="quantity" value="1">
                            <button class="claim claim-btn" data-state="waiting">CLAIM</button>
                        </div>
                    </div>
                </div>
            </claim-page>
        </EtherProvider>
    </main>
</Layout>

<script>
    import { with_signer, get_data, approve_claim, claim } from "../lib/ether";

	class ClaimPage extends HTMLElement {
        #total:     Nullable<HTMLSpanElement>;
        #totalText: Nullable<HTMLSpanElement>;
        #claimed:   Nullable<HTMLSpanElement>;
        #available: Nullable<HTMLSpanElement>;
        #price:     Nullable<HTMLSpanElement>;
        #number:    Nullable<HTMLInputElement>;
        #button:    Nullable<HTMLButtonElement>;

        async #set_data() {
            console.log(await get_data());
            const [claimed, available, price] = await get_data();

            if(this.#claimed === null || this.#available === null || this.#price === null) { 
                return; 
            }

            var total = claimed + available;

            this.#total.innerText = `${total}`;
            this.#totalText.innerText = total > 1 ? 'Arks' : 'Ark';
            this.#claimed.innerText = `${claimed}`;
            this.#available.innerText = `${available}`;
            this.#price.innerText = `${price} USDC`;
        }

        async #initialize() {
            await with_signer();
            await this.#set_data();
            delete this.dataset.locked;
        }

        async #button_handler() {
            if(this.#button === null) { return; }

            switch (this.#button.dataset.state) {
                case "waiting": case "claimed": {
                    this.#button.dataset.state = "pending";
                    await approve_claim();
                    this.#button.dataset.state = "approved";
                    this.#button.innerText = "mint";

                    break;
                }

                case "approved": {
                    if(this.#number === null) { return; }

                    this.#button.dataset.state = "pending";
                    await claim(parseInt(this.#number.value));
                    await this.#set_data();

                    this.#button.dataset.state = "claimed";
                    this.#button.innerText = "claimed";
                    break;
                }

                case "pending": {
                    console.error("Please wait for the transaction to finish!");
                    break;
                }

                default: {
                    return;
                }
            }
        }

		constructor() {
			super();

            this.#total =  document.querySelector(".total") as HTMLSpanElement;
            this.#totalText =  document.querySelector(".total-text") as HTMLSpanElement;
            this.#claimed =  document.querySelector(".claimed") as HTMLSpanElement;
            this.#available =  document.querySelector(".available") as HTMLSpanElement;
            this.#price =  document.querySelector(".price") as HTMLSpanElement;
            this.#number =  document.querySelector(".quantity") as HTMLInputElement;
            this.#button =  document.querySelector(".claim") as HTMLButtonElement;

            if(this.#button === null) { return; }

            this.#button.addEventListener("click", () => this.#button_handler());
            this.#initialize();
		}
	}

	customElements.define('claim-page', ClaimPage);
</script>
<style lang="scss">
    [data-locked] :not(.locked) { display: none; }
    :not([data-locked]) .locked { display: none; }

    #claim {
        position: relative;
        min-height: 100vh;
        margin-bottom: -5rem;

        &:before {
            content: "";
            position: absolute;
            top: 0;
            height: 100%;
            width: 100%;
            background: url("/images/Web-BG-2a-1.jpg") no-repeat center center;
            background-size: cover;
            background-attachment: fixed;
        }

        h1 {
            padding-top: 50px;
            font-size: 4rem;
            text-align: center;
            filter: drop-shadow(.5rem .5rem 1rem hsla(var(--bg-color), .5));
        }

        .claim-card {
            display: grid;
            place-content: center;
        }

        .claim-info {
            display: flex;
            gap: 4rem;
            margin-top: 5rem;
            padding: 3rem;
            font-size: 1.2rem;
            background: var(--bg-color-transparent);
            clip-path: polygon(
                0 0, 
                calc(100% - var(--border-size)) 0,
                100% var(--border-size),
                100% 100%,
                var(--border-size) 100%,
                0 calc(100% - var(--border-size))
            );
        }

        .claim-data {
            display: grid;
            grid-template-columns: repeat(2, auto);
            column-gap: 1.5rem;
        }

        .mint-form {
            display: flex;
            flex-direction: column;
            justify-content: space-evenly;
        }

        .quantity {
            width: 7.5rem;
            padding: .5rem;
            padding-left: 1rem;
            font-size: 1.5rem;
            text-align: center;
            border: 0;

            --border-size: .5rem;
            clip-path: polygon(
                0 0, 
                calc(100% - var(--border-size)) 0,
                100% var(--border-size),
                100% 100%,
                var(--border-size) 100%,
                0 calc(100% - var(--border-size))
            );
        }

        .claim {            
            padding: 7px 50px;
            font-family: 'Righteous', cursive;
            font-size: 2rem;
            color: var(--accent-color);
            background-color: #fff;
            cursor: pointer;
            transition: filter 0.2s;

            --border-size: 1rem;
            clip-path: polygon(
                0 0, 
                calc(100% - var(--border-size)) 0,
                100% var(--border-size),
                100% 100%,
                var(--border-size) 100%,
                0 calc(100% - var(--border-size))
            );

            &:hover {
                filter: brightness(.7);
            }

            &:active {
                filter: brightness(.5);
            }
        }

        @media screen and (max-width: 50rem) {
			.claim-info {
                flex-direction: column;
                gap: 1rem;
            }

            .mint-form {
                gap: .5rem;
            }
		}	
    }
</style>
