---
import LoginProvider from './LoginProvider.astro';

export interface Props {
	page: string;
}

const { page } = Astro.props;

type HeaderLink = {
	title: string;
	link: string;
};

type HeaderDropwdown = {
	title: string;
	links: HeaderLink[];
};

const links: (HeaderLink | HeaderDropwdown)[] = [
	{
		title: "Home",
		link: "/#",
	},
	{
		title: "Join",
		links: [
			{
				title: "Collection",
				link: "https://raresama.com/collections/2109/0x1acb10dbd319da52d941dfec478f1aa2d118d7f7",
			},
			{
				title: "Community",
				link: "/#community",
			},
		],
	},
	{
		title: "About",
		links: [
			{
				title: "Wiki",
				link: "https://dgrs.fandom.com/wiki/DGRS_Wiki",
			},
			{
				title: "Team",
				link: "/#team",
			},
			{
				title: "Lore",
				link: "/lore",
			},
			{
				title: "Roadmap",
				link: "/roadmap",
			},
			{
				title: "Motivation",
				link: "/motivation",
			},
			// {
			// 	title: "Blog",
			// 	link: "/blog",
			// },
		],
	},
	{
		title: "Games",
		links: [
			{
				title: "CoNexus",
				link: "/conexus"
			}
		]
	}
];

function isLink(object: any): object is HeaderLink {
	return "link" in object;
}
---

<custom-header>
	<header>
		<div class="title">DeGenerous</div>
		<div class="close"></div>
		<nav>
			<ul class="outer">
				{
					links.map((l) => {
						if (isLink(l)) {
							return (
								<li data-selected={l.title == page}>
									<a class="c" href={l.link}>{l.title}</a>
								</li>
							);
						}

						return (
							<li class="sublist">
								<span>
									{l.title}
									<img src="/icons/arrow_drop_down.svg" alt="" />
								</span>
								<ul class="inner">
									{l.links.map((link, i) => (
										<li data-selected={link.title == page} style={`--nth:${i}`}>
											<a class="c" href={link.link} target={link.link.indexOf("http") === 0 ? "_blank" : "_self"}>{link.title}</a>
										</li>
									))}
								</ul>
							</li>
						);
					})
				}

				<LoginProvider>
					<Fragment slot="yes">
						<li class="disconnect">
							<button>Disconnect</button>
						</li>
					</Fragment>
					<li slot="no" class="connect">
						<button>Connect</button>
					</li>
				</LoginProvider>
			</ul>
		</nav>
		<button class="open">
			<img src="/icons/menu.svg" alt="Open menu" />
		</button>
	</header>
</custom-header>

<script>
	import { login, logout } from "@lib/auth";

	class CustomHeader extends HTMLElement {
		constructor() {
			super();

			const open_button = this.querySelector(".open")      as HTMLButtonElement;
			const nav = this.querySelector("nav")                as HTMLElement;
			const ul = this.querySelector("ul")                  as HTMLUListElement;
			const _close = this.querySelector(".close")          as HTMLDivElement;
			const connect = this.querySelector(".connect")       as HTMLButtonElement;
			const disconnect = this.querySelector(".disconnect") as HTMLButtonElement;

			const element = this;
			const open = () => {
				element.dataset.open = "true";
			};
			const close = () => {
				element.dataset.open = "closing";
				setTimeout(() => {
					delete element.dataset.open;
				}, 200);
			};

			open_button.addEventListener("click", open);
			_close.addEventListener("click", close);
			ul.addEventListener("click", close);

			nav.addEventListener("click", (e: MouseEvent) => {
				e.stopPropagation();
			});

			window.addEventListener("keydown", (e: KeyboardEvent) => {
				if (e.key === "Escape") {
					close();
				}
			});

			connect.onclick = login;
			disconnect.onclick = logout;
		}
	}

	customElements.define("custom-header", CustomHeader);
</script>

<style lang="scss">
	$header-height: 4rem;

	html {
		scroll-behavior: smooth;
		scroll-padding-top: 4rem;
	}

	header {
		position: sticky;
		top: 0;
		inset-inline: 0;
		background: var(--accent-gradient);
		color: var(--on-accent-color);
		z-index: 1000;
		padding-inline: 3rem;
		height: $header-height;
		display: flex;
		justify-content: space-between;
	}

	.title {
		display: flex;
    	align-items: center;
		font-family: 'Righteous', cursive;
		font-size: 1.5rem;
	}

	ul {
		list-style: none;
		padding-inline: 0;
	}

	.outer {
		display: flex;
		justify-content: flex-end;
	}

	li {
		display: flex;
		flex-direction: column;
	}

	header :where(a, span) {
		display: flex;
		align-items: center;
		min-height: 100%;
		text-underline-offset: 0.5rem;
		color: var(--on-accent-color);
		padding-inline: 1.5rem;
	}

	.sublist span {
		justify-content: space-between;
	}

	.sublist img {
		height: 2rem;
		aspect-ratio: 1/1;
	}

	.connect, .disconnect {
		justify-content: center;
		margin-left: 1rem;
	}

	.open {
		all: unset;
		cursor: pointer;
		position: absolute;
		right: 2rem;
		top: 0;
		height: 100%;
		place-content: center;
		aspect-ratio: 1/1;

		display: none;
		pointer-events: none;

		img {
			width: 100%;
			aspect-ratio: 1/1;
		}
	}

	@media screen and (min-width: 50rem) {
		li {
			height: $header-height;
		}
		
		.inner {
			transition: translate 0s 0.4s;
			pointer-events: none;
			translate: 0 calc(-100% - $header-height);

			li {
				background-color: var(--accent-color);
				transition: 
					translate 0.2s calc(0.1s * var(--nth)) cubic-bezier(0.34, 1.56, 0.64, 1),
					opacity   0.2s calc(0.1s * var(--nth)) cubic-bezier(0.34, 1.56, 0.64, 1);

				translate: -2rem 0;
				opacity: 0;
				overflow: hidden;
			}

			li:last-child {
				border-radius: 0 0 0.5rem 0.5rem;
			}
		}

		header a:where(:hover, :focus-within) {
			outline: none;
			background-color: var(--card-border-color);
			color: var(--fg-color);
			text-decoration: underline 2px solid var(--fg-color);
			filter: none;
		}

		.sublist:where(:hover, :focus-within) {
			.inner {
				transition: translate 0s 0s;
				translate: 0 -1 * $header-height;
				pointer-events: initial;

				li {
					translate: 0 0;
					opacity: 1;
				}
			}
		}
	}

	@media screen and (max-width: 50rem) {
		.outer {
			height: initial;
			position: fixed;
			bottom: calc(100%);
			left: 0;
			flex-direction: column;
			translate: 0 0;
			z-index: 100;
			width: 100%;
			background: var(--accent-gradient);
			text-align: center;
			padding-block: 2rem;
			transition: translate 0.2s;

			a, span {
				padding-block: 0.5rem;
				width: 100%;
			}
		}

		.inner a {
			padding-left: 4rem;
		}

		.open {
			display: grid;
			pointer-events: initial;
		}

		.sublist span {
			justify-content: flex-start;
			gap: 1rem;
		}

		.connect, .disconnect {
			justify-content: center;
			margin-inline: 1rem;
			margin-top: 1rem;
		}

		.close {
			transition: opacity 0.1s;
			position: fixed;
			inset: 0;
			background-color: hsla(0, 0%, 0%, 0.8);
			opacity: 0;
			pointer-events: none;
			display: grid;
			place-content: center;
			z-index: 50;
		}

		[data-open] {
			.close {
				opacity: 1;
				pointer-events: initial;
			}

			.outer {
				translate: 0 100%;
			}
		}
	}
</style>
