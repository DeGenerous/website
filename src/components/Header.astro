---
export interface Props {
  page: string;
}

const { page } = Astro.props;

type HeaderLink = {
  title: string;
  link: string;
};

type HeaderDropwdown = {
  title: string;
  links: HeaderLink[];
};

const links: (HeaderLink | HeaderDropwdown)[] = [
  {
    title: "Home",
    link: "/#",
  },
  {
    title: "Roadmap",
    link: "/roadmap",
  },
  {
    title: "Wiki",
    link: "https://degenerousdao.gitbook.io/wiki/",
  },
  {
    title: "Apps",
    links: [
      {
        title: "CoNexus",
        link: "https://conexus.degenerousdao.com/",
      },
      {
        title: "Iron Lion: Last Stand",
        link: "https://emerald-rain.github.io/Iron-Lion-Last-Stand/",
      },
      {
        title: "Battle for Nexon",
        link: "https://emerald-rain.github.io/Battle-for-Nexon-WebGL/",
      },
      {
        title: "Ark Assasin",
        link: "https://emerald-rain.github.io/Ark-Assassin-Unity/",
      },
    ],
  },
];

function isLink(object: any): object is HeaderLink {
  return "link" in object;
}
---

<custom-header>
  <div class="close"></div>
  <header>
    <a class="c" href="/#">DeGenerous</a>
    <nav>
      <ul class="outer">
        {
          links.map((l) => {
            if (isLink(l)) {
              return (
                <li data-selected={l.title == page}>
                  <a class="c" href={l.link}>
                    {l.title}
                  </a>
                </li>
              );
            }

            return (
              <li class="sublist">
                <span>
                  {l.title}
                  <img src="/icons/arrow_drop_down.svg" alt="" />
                </span>
                <ul class="inner">
                  {l.links.map((link, i) => (
                    <li data-selected={link.title == page} style={`--nth:${i}`}>
                      <a
                        class="c"
                        href={link.link}
                        target={
                          link.link.indexOf("http") === 0 ? "_blank" : "_self"
                        }
                      >
                        {link.title}
                      </a>
                    </li>
                  ))}
                </ul>
              </li>
            );
          })
        }
      </ul>
    </nav>
    <button class="open">
      <img src="/icons/menu.svg" alt="Open menu" />
    </button>
  </header>
</custom-header>

<script>
  class CustomHeader extends HTMLElement {
    constructor() {
      super();

      const open_button = this.querySelector(".open");
      const nav = this.querySelector("nav");
      const ul = this.querySelector("ul");
      const _close = this.querySelector(".close");
      const header = this.querySelector("header");

      const element = this;

      window.onscroll = function () {
        header?.toggleAttribute(
          "stuck",
          document.documentElement.scrollTop > 0
        );
      };
      const open = () => {
        element.dataset.open = "true";
      };
      const close = () => {
        element.dataset.open = "closing";
        setTimeout(() => {
          delete element.dataset.open;
        }, 200);
      };

      open_button?.addEventListener("click", open);
      _close?.addEventListener("click", close);
      ul?.addEventListener("click", close);

      nav?.addEventListener("click", (e: MouseEvent) => {
        e.stopPropagation();
      });

      window.addEventListener("keydown", (e: KeyboardEvent) => {
        if (e.key === "Escape" && element.dataset.open === "true") {
          close();
        }
      });
    }
  }

  customElements.define("custom-header", CustomHeader);
</script>

<style lang="scss">
  @use "@styles/imports";

  $header-height: 4rem;
  $link-bg-color: 4rem;

  :global(html) {
    scroll-behavior: smooth;
    scroll-padding-top: 4rem;
  }

  header {
    position: sticky;
    top: 0;
    inset-inline: 0;
    z-index: 1000;
    height: $header-height;
    display: flex;
    justify-content: space-between;

    backdrop-filter: blur(10px);
    transition: background-color 0.2s;

    padding-inline: calc((100vw - imports.$content-width) / 2);
  }

  header[stuck] {
    background-color: rgba(imports.$bg-color, 0.8);
  }

  a {
    text-decoration: none;
  }

  ul {
    list-style: none;
    padding-inline: 0;
  }

  .outer {
    display: flex;
  }

  li {
    display: flex;
    flex-direction: column;
  }

  header :where(a, span) {
    display: flex;
    align-items: center;
    min-height: 100%;
    text-underline-offset: 0.5rem;
    color: imports.$fg-color;
    padding-inline: 1.5rem;
  }

  .sublist span {
    justify-content: space-between;
  }

  .sublist img {
    height: 2rem;
    aspect-ratio: 1/1;
  }

  .open {
    all: unset;
    cursor: pointer;
    position: absolute;
    right: 2rem;
    top: 0;
    height: 100%;
    place-content: center;
    aspect-ratio: 1/1;

    display: none;
    pointer-events: none;

    img {
      width: 100%;
      aspect-ratio: 1/1;
    }
  }

  @media screen and (min-width: 60rem) {
    li {
      height: $header-height;
    }

    .inner {
      transition: translate 0s 0.4s;
      pointer-events: none;
      translate: 0 calc(-100% - $header-height);

      li {
        background-color: imports.$accent-bg-color;
        transition: translate 0.2s calc(0.1s * var(--nth))
            cubic-bezier(0.34, 1.56, 0.64, 1),
          opacity 0.2s calc(0.1s * var(--nth)) cubic-bezier(0.34, 1.56, 0.64, 1);

        translate: -2rem 0;
        opacity: 0;
        overflow: hidden;
      }

      li:last-child {
        border-radius: 0 0 0.5rem 0.5rem;
      }
    }

    header a:where(:hover, :focus-within) {
      outline: none;
      filter: unset;
      background-color: darken(imports.$accent-bg-color, 10%);
    }

    .sublist:where(:hover, :focus-within) {
      .inner {
        transition: translate 0s 0s;
        translate: 0 -1 * $header-height;
        pointer-events: initial;

        li {
          translate: 0 0;
          opacity: 1;
        }
      }
    }
  }

  @media screen and (max-width: 60rem) {
    .outer {
      height: initial;
      position: fixed;
      bottom: 100%;
      left: 0;
      flex-direction: column;
      translate: 0 0;
      z-index: 100;
      width: 100%;
      text-align: center;
      padding-block: 2rem;
      transition: translate 0.2s;
      max-height: 100vh;
      overflow-y: auto;

      backdrop-filter: blur(10px);
      background-color: rgba(imports.$bg-color, 0.8);

      a,
      span {
        padding-block: 0.5rem;
        width: 100%;
      }
    }

    li {
      padding-block: 0.2rem;
    }

    .inner a {
      padding-left: 4rem;
    }

    .open {
      display: grid;
      pointer-events: initial;
    }

    .sublist span {
      justify-content: flex-start;
      gap: 1rem;
    }

    .connect,
    .disconnect {
      justify-content: center;
      margin-inline: 1rem;
      margin-top: 1rem;
    }

    .close {
      transition: opacity 0.1s;
      position: fixed;
      inset: 0;
      background-color: hsla(0, 0%, 0%, 0.8);
      opacity: 0;
      pointer-events: none;
      display: grid;
      place-content: center;
      z-index: 50;
    }

    [data-open] {
      .close {
        opacity: 1;
        pointer-events: initial;
      }

      .outer {
        translate: 0 100%;
      }
    }
  }
</style>
