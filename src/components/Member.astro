---
export interface Props {
	name: string;
	title: string
	img: string;
}

const { name, title, img } = Astro.props;
---

<member-card>
	<div class="card">
		<img src={img} alt={`${name}'s picture`}>
		<div class="grow" />
		<div class="details">
			<h2>{name}</h2>
			<h3>{title}</h3>
		</div>
	</div>
	
	<div class="close">
		<div class="opened">
			<img src={img} alt={`${name}'s picture`}>
			<div class="grow" />
			<div class="details">
				<span class="exit">x</span>
				<h2>{name}</h2>
				<h3>{title}</h3>
				<span class="description">
					<slot />
				</span>
			</div>
		</div>
	</div>
</member-card>

<script>
	class MemberCard extends HTMLElement {
		#card:    Nullable<HTMLDivElement>;
		#close:   Nullable<HTMLDivElement>;
		#details: Nullable<HTMLDivElement>;

		constructor() {
			super();

            this.#card    = this.querySelector(".card") as HTMLDivElement;
            this.#close   = this.querySelector(".close") as HTMLDivElement;
            this.#details = this.querySelector(".opened") as HTMLDivElement;

			const element = this;
			const open = () => { element.dataset.open = "true"; }
			const close = () => {
				element.dataset.open = "closing";
				setTimeout(() => {
					delete element.dataset.open;
				}, 200);
			}

			this.#card?.addEventListener("click", open);
			this.#close?.addEventListener("click", close);

			this.#details?.addEventListener("click", (e: MouseEvent) => {
				e.stopPropagation();
			})

			window.addEventListener('keydown', (e: KeyboardEvent) => {
				if (e.key === 'Escape') { close(); }
			})
		}
	}

	customElements.define('member-card', MemberCard);
</script>

<style lang="scss">
	img {
		width: 100%;
		object-fit: cover;
		aspect-ratio: 1/1;
	}

	@keyframes glare {
		from {
			background-position: top right;
		}
		to {
			background-position: bottom left;
		}
	}

	member-card {
		display: contents;
		cursor: pointer;
	}

	.card {
		position: relative;
		background-color: var(--card-color);
		color: var(--card-text-color);
		border-radius: var(--corner-size);
		border: solid 2px var(--card-border-color);
		overflow: hidden;

		display: block;

		flex-grow: 1;
		display: flex;
		flex-direction: column;
		justify-content: flex-end;
		transition: scale .1s;
		
		&::after {
			content: "";
			position: absolute;
			inset: 0;
			transition: background-position 0s;
			background: linear-gradient(45deg, transparent 40%, hsl(0, 0%, 100%, .2) 60%, transparent 65%);
			background-position: 0% 0%;
			background-size: 300% 300%;
			background-position: top right;
		}

		:not([data-open]) &:hover {
			scale: 1.05;
			z-index: 100;

			&::after {
				animation: glare 1s .25s forwards;
			}
		}
	}

	.grow {
		flex-grow: 1;
	}

	.details {
		padding: 1rem;
	}

	.close {
		transition: opacity .1s;
		position: fixed;
		inset: 0;
		background-color: hsla(0, 0%, 0%, 0.8);
		opacity: 0;
		pointer-events: none;
		display: grid;
		place-content: center;
		z-index: 1000;
	}

	.opened {
		display: block;
		width: calc(100vw - 2rem);
		max-width: 40rem;
		background-color: var(--bg-color);

		border-radius: var(--corner-size);
		border: solid 4px var(--card-border-color);

		transition: translate .2s, opacity .2s;
		translate: 0 2rem;
		opacity: 0;

		max-height: 90vh;
		overflow-y: auto;
	}

	[data-open] {
		.close {
			opacity: 1;
			pointer-events: initial;
		}

		.opened {
			translate: 0;
			opacity: 1;
		}
	}

	[data-open="closing"] {
		.opened {
			translate: 0 -2rem;
			opacity: 0;
		}
	}
</style>
